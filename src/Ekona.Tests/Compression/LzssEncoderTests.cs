namespace SceneGate.Ekona.Tests.Compression;

using System;
using System.IO;
using NUnit.Framework;
using SceneGate.Ekona.Compression;
using Yarhl.IO;

[TestFixture]
public class LzssEncoderTests
{
    private const int MaxRaw = 8;
    private const int MinPattern = 3;
    private const int MaxPattern = (1 << 4) + 2;
    private const int MaxDistance = 1 << 12;

    private LzssEncoder encoder;
    private DataStream actualOutput;

    [SetUp]
    public void SetUp()
    {
        actualOutput = new DataStream();
        encoder = new LzssEncoder(actualOutput, false);
    }

    [TearDown]
    public void TearDown()
    {
        actualOutput.Dispose();
    }

    [Test]
    public void NullDecompressionThrowsException()
    {
        Assert.That(() => encoder.Convert(((BinaryFormat)null)!), Throws.ArgumentNullException);
        Assert.That(() => encoder.Convert(((Stream)null)!), Throws.ArgumentNullException);
    }

    [Test]
    public void InvalidStreamInitializationThrows()
    {
        Assert.That(() => new LzssEncoder(null!), Throws.ArgumentNullException);
    }

    [Test]
    public void ConverterUseConstructorStream()
    {
        using var input = new DataStream();
        input.Write([0xCA, 0xFE]);

        var myEncoder = new LzssEncoder(actualOutput);

        Stream returned = myEncoder.Convert(input);

        Assert.That(actualOutput, Is.SameAs(returned));
    }

    [Test]
    public void FirstTwoBytesEncodedAsRaw()
    {
        byte[] input = [ 0xCA, 0xFE ];
        byte[] expected = [0x00, 0xCA, 0xFE];

        AssertCompression(input, expected);
    }

    [Test]
    public void WriteMaxRawBytes()
    {
        byte[] input = new byte[MaxRaw];
        for (int i = 0; i < MaxRaw; i++) {
            input[i] = (byte)i;
        }

        byte[] expected = [0x00, .. input];
        AssertCompression(input, expected);
    }

    [Test]
    public void WriteRawAfterMaxRawBytes()
    {
        var stream = new DataStream();
        for (int i = 0; i < MaxRaw + 1; i++) {
            stream.WriteByte((byte)i);
        }

        Stream compressed = encoder.Convert(stream);

        compressed.Position = 0;
        Assert.That(compressed.Length, Is.EqualTo(MaxRaw + 3));
        Assert.That(compressed.ReadByte(), Is.EqualTo(0));
        for (int i = 0; i < MaxRaw; i++) {
            Assert.That(compressed.ReadByte(), Is.EqualTo(i));
        }

        Assert.That(compressed.ReadByte(), Is.EqualTo(0));
        Assert.That(compressed.ReadByte(), Is.EqualTo(MaxRaw));
    }

    [Test]
    public void IgnoreSequencesSmallerEqual3()
    {
        byte[] input = [ 0xFE, 0xFE, 0xFE, 0xCA, 0xFE ];
        byte[] expected = [0x00, 0xFE, 0xFE, 0xFE, 0xCA, 0xFE];

        AssertCompression(input, expected);
    }

    [Test]
    public void FindSequenceOfLength3()
    {
        byte[] input = [ 0xCA, 0xFE, 0xC0, 0xFF, 0xCA, 0xFE, 0xC0 ];
        byte[] expected = [ 0b0000_1000, 0xCA, 0xFE, 0xC0, 0xFF, 0x00, 0x03 ];

        AssertCompression(input, expected);
    }

    [Test]
    public void FindSequenceStartingAtPos1()
    {
        // This guarantees compatibility with VRAM (units of 16-bits)
        byte[] input = [ 0xAA, 0xAA, 0xAA, 0xAA, 0xAA ];
        byte[] expected = [ 0b0010_0000, 0xAA, 0xAA, 0x00, 0x01 ];

        AssertCompression(input, expected);
    }

    [Test]
    public void FindSequenceInPresent()
    {
        byte[] input = [ 0xCA, 0xFE, 0xC0, 0xCA, 0xFE, 0xC0 ];
        byte[] expected = [0b0001_0000, 0xCA, 0xFE, 0xC0, 0x00, 0x02];
        AssertCompression(input, expected);
    }

    [Test]
    public void FindPatternInFutureDecompressed()
    {
        byte[] input = [ 0xBB, 0xBB, 0xBB, 0xBB, 0xBB ];
        byte[] expected = [ 0b0010_0000, 0xBB, 0xBB, 0x00, 0x01 ];

        AssertCompression(input, expected);
    }

    [Test]
    public void FindSelfRepeatingSequence()
    {
        byte[] input = [ 0xCA, 0xFE, 0xCA, 0xFE, 0xCA, 0xFE ];
        byte[] expected = [0b0010_0000, 0xCA, 0xFE, 0x10, 0x01];
        AssertCompression(input, expected);
    }

    [Test]
    public void FindLargerPatternWhenMultipleMatch()
    {
        byte[] input = [ 0xAA, 0xBB, 0xCC, 0xAA, 0xBB, 0xFF, 0xAA, 0xBB, 0xCC ];
        byte[] expected = [ 0b0000_0010, 0xAA, 0xBB, 0xCC, 0xAA, 0xBB, 0xFF, 0x00, 0x05 ];

        AssertCompression(input, expected);
    }

    [Test]
    public void FindPatternsStartingEndOfBuffer()
    {
        byte[] input = [ 0xAA, 0xBB, 0xCC, 0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC ];
        byte[] expected = [ 0b0001_0100, 0xAA, 0xBB, 0xCC, 0x00, 0x02, 0xFF, 0x00, 0x06 ];

        AssertCompression(input, expected);
    }

    [Test]
    public void FindPatternWithMaxLength()
    {
        byte[] input = new byte[MaxPattern + 2];
        for (int i = 0; i < input.Length; i++) {
            input[i] = 0xC0;
        }

        byte[] expected = [0b0010_0000, 0xC0, 0xC0, 0xF0, 0x01];

        AssertCompression(input, expected);
    }

    [Test]
    public void FindAnotherPatternAfterMaxLengthPattern()
    {
        byte[] input = new byte[2 + MaxPattern + 3];
        for (int i = 0; i < input.Length; i++) {
            input[i] = 0xC0;
        }

        // It finds starting the end of the buffer, not the last position
        byte[] expected = [0b0011_0000, 0xC0, 0xC0, 0xF0, 0x01, 0x00, 0x13];

        AssertCompression(input, expected);
    }

    [Test]
    public void FindShorterPatternAsRawCopyAfterMaxLengthPattern()
    {
        byte[] input = new byte[2 + MaxPattern + 2];
        for (int i = 0; i < input.Length; i++) {
            input[i] = 0xC0;
        }

        byte[] expected = [0b0010_0000, 0xC0, 0xC0, 0xF0, 0x01, 0xC0, 0xC0];

        AssertCompression(input, expected);
    }

    [Test]
    public void DoNotFindPatternsOutsideMaxDistance()
    {
        byte[] input = new byte[MinPattern + MaxDistance + MinPattern];
        Array.Fill<byte>(input, 0xAA, 0, MinPattern);
        Array.Fill<byte>(input, 0xBB, MinPattern, MaxDistance);
        Array.Fill<byte>(input, 0xAA, MinPattern + MaxDistance, MinPattern);

        byte[] expected = [
            0x07, 0xAA, 0xAA, 0xAA, 0xBB, 0xBB, 0xF0, 0x01, 0xF0, 0x13, 0xF0, 0x25,
            0xFF, 0xF0, 0x37, 0xF0, 0x49, 0xF0, 0x5B, 0xF0, 0x6D, 0xF0, 0x7F, 0xF0, 0x91, 0xF0, 0xA3, 0xF0, 0xB5,
            0xFF, 0xF0, 0xC7, 0xF0, 0xD9, 0xF0, 0xEB, 0xF0, 0xFD, 0xF1, 0x0F, 0xF1, 0x21, 0xF1, 0x33, 0xF1, 0x45,
            0xFF, 0xF1, 0x57, 0xF1, 0x69, 0xF1, 0x7B, 0xF1, 0x8D, 0xF1, 0x9F, 0xF1, 0xB1, 0xF1, 0xC3, 0xF1, 0xD5,
            0xFF, 0xF1, 0xE7, 0xF1, 0xF9, 0xF2, 0x0B, 0xF2, 0x1D, 0xF2, 0x2F, 0xF2, 0x41, 0xF2, 0x53, 0xF2, 0x65,
            0xFF, 0xF2, 0x77, 0xF2, 0x89, 0xF2, 0x9B, 0xF2, 0xAD, 0xF2, 0xBF, 0xF2, 0xD1, 0xF2, 0xE3, 0xF2, 0xF5,
            0xFF, 0xF3, 0x07, 0xF3, 0x19, 0xF3, 0x2B, 0xF3, 0x3D, 0xF3, 0x4F, 0xF3, 0x61, 0xF3, 0x73, 0xF3, 0x85,
            0xFF, 0xF3, 0x97, 0xF3, 0xA9, 0xF3, 0xBB, 0xF3, 0xCD, 0xF3, 0xDF, 0xF3, 0xF1, 0xF4, 0x03, 0xF4, 0x15,
            0xFF, 0xF4, 0x27, 0xF4, 0x39, 0xF4, 0x4B, 0xF4, 0x5D, 0xF4, 0x6F, 0xF4, 0x81, 0xF4, 0x93, 0xF4, 0xA5,
            0xFF, 0xF4, 0xB7, 0xF4, 0xC9, 0xF4, 0xDB, 0xF4, 0xED, 0xF4, 0xFF, 0xF5, 0x11, 0xF5, 0x23, 0xF5, 0x35,
            0xFF, 0xF5, 0x47, 0xF5, 0x59, 0xF5, 0x6B, 0xF5, 0x7D, 0xF5, 0x8F, 0xF5, 0xA1, 0xF5, 0xB3, 0xF5, 0xC5,
            0xFF, 0xF5, 0xD7, 0xF5, 0xE9, 0xF5, 0xFB, 0xF6, 0x0D, 0xF6, 0x1F, 0xF6, 0x31, 0xF6, 0x43, 0xF6, 0x55,
            0xFF, 0xF6, 0x67, 0xF6, 0x79, 0xF6, 0x8B, 0xF6, 0x9D, 0xF6, 0xAF, 0xF6, 0xC1, 0xF6, 0xD3, 0xF6, 0xE5,
            0xFF, 0xF6, 0xF7, 0xF7, 0x09, 0xF7, 0x1B, 0xF7, 0x2D, 0xF7, 0x3F, 0xF7, 0x51, 0xF7, 0x63, 0xF7, 0x75,
            0xFF, 0xF7, 0x87, 0xF7, 0x99, 0xF7, 0xAB, 0xF7, 0xBD, 0xF7, 0xCF, 0xF7, 0xE1, 0xF7, 0xF3, 0xF8, 0x05,
            0xFF, 0xF8, 0x17, 0xF8, 0x29, 0xF8, 0x3B, 0xF8, 0x4D, 0xF8, 0x5F, 0xF8, 0x71, 0xF8, 0x83, 0xF8, 0x95,
            0xFF, 0xF8, 0xA7, 0xF8, 0xB9, 0xF8, 0xCB, 0xF8, 0xDD, 0xF8, 0xEF, 0xF9, 0x01, 0xF9, 0x13, 0xF9, 0x25,
            0xFF, 0xF9, 0x37, 0xF9, 0x49, 0xF9, 0x5B, 0xF9, 0x6D, 0xF9, 0x7F, 0xF9, 0x91, 0xF9, 0xA3, 0xF9, 0xB5,
            0xFF, 0xF9, 0xC7, 0xF9, 0xD9, 0xF9, 0xEB, 0xF9, 0xFD, 0xFA, 0x0F, 0xFA, 0x21, 0xFA, 0x33, 0xFA, 0x45,
            0xFF, 0xFA, 0x57, 0xFA, 0x69, 0xFA, 0x7B, 0xFA, 0x8D, 0xFA, 0x9F, 0xFA, 0xB1, 0xFA, 0xC3, 0xFA, 0xD5,
            0xFF, 0xFA, 0xE7, 0xFA, 0xF9, 0xFB, 0x0B, 0xFB, 0x1D, 0xFB, 0x2F, 0xFB, 0x41, 0xFB, 0x53, 0xFB, 0x65,
            0xFF, 0xFB, 0x77, 0xFB, 0x89, 0xFB, 0x9B, 0xFB, 0xAD, 0xFB, 0xBF, 0xFB, 0xD1, 0xFB, 0xE3, 0xFB, 0xF5,
            0xFF, 0xFC, 0x07, 0xFC, 0x19, 0xFC, 0x2B, 0xFC, 0x3D, 0xFC, 0x4F, 0xFC, 0x61, 0xFC, 0x73, 0xFC, 0x85,
            0xFF, 0xFC, 0x97, 0xFC, 0xA9, 0xFC, 0xBB, 0xFC, 0xCD, 0xFC, 0xDF, 0xFC, 0xF1, 0xFD, 0x03, 0xFD, 0x15,
            0xFF, 0xFD, 0x27, 0xFD, 0x39, 0xFD, 0x4B, 0xFD, 0x5D, 0xFD, 0x6F, 0xFD, 0x81, 0xFD, 0x93, 0xFD, 0xA5,
            0xFF, 0xFD, 0xB7, 0xFD, 0xC9, 0xFD, 0xDB, 0xFD, 0xED, 0xFD, 0xFF, 0xFE, 0x11, 0xFE, 0x23, 0xFE, 0x35,
            0xFF, 0xFE, 0x47, 0xFE, 0x59, 0xFE, 0x6B, 0xFE, 0x7D, 0xFE, 0x8F, 0xFE, 0xA1, 0xFE, 0xB3, 0xFE, 0xC5,
            0xFF, 0xFE, 0xD7, 0xFE, 0xE9, 0xFE, 0xFB, 0xFF, 0x0D, 0xFF, 0x1F, 0xFF, 0x31, 0xFF, 0x43, 0xFF, 0x55,
            0xFF, 0xFF, 0x67, 0xFF, 0x79, 0xFF, 0x8B, 0xFF, 0x9D, 0xFF, 0xAF, 0xFF, 0xC1, 0xFF, 0xD3, 0xFF, 0xE5,
            0x80, 0x5F, 0xF7, 0xAA, 0xAA, 0xAA,
        ];
        AssertCompression(input, expected);
    }

    [Test]
    public void FindPatternAtMaxDistance()
    {
        byte[] input = new byte[MaxDistance + MinPattern];
        Array.Fill<byte>(input, 0xAA, 0, MinPattern);
        Array.Fill<byte>(input, 0xBB, MinPattern, MaxDistance - MinPattern);
        Array.Fill<byte>(input, 0xAA, MaxDistance, MinPattern);

        byte[] expected = [
            0x07, 0xAA, 0xAA, 0xAA, 0xBB, 0xBB, 0xF0, 0x01, 0xF0, 0x13, 0xF0, 0x25,
            0xFF, 0xF0, 0x37, 0xF0, 0x49, 0xF0, 0x5B, 0xF0, 0x6D, 0xF0, 0x7F, 0xF0, 0x91, 0xF0, 0xA3, 0xF0, 0xB5,
            0xFF, 0xF0, 0xC7, 0xF0, 0xD9, 0xF0, 0xEB, 0xF0, 0xFD, 0xF1, 0x0F, 0xF1, 0x21, 0xF1, 0x33, 0xF1, 0x45,
            0xFF, 0xF1, 0x57, 0xF1, 0x69, 0xF1, 0x7B, 0xF1, 0x8D, 0xF1, 0x9F, 0xF1, 0xB1, 0xF1, 0xC3, 0xF1, 0xD5,
            0xFF, 0xF1, 0xE7, 0xF1, 0xF9, 0xF2, 0x0B, 0xF2, 0x1D, 0xF2, 0x2F, 0xF2, 0x41, 0xF2, 0x53, 0xF2, 0x65,
            0xFF, 0xF2, 0x77, 0xF2, 0x89, 0xF2, 0x9B, 0xF2, 0xAD, 0xF2, 0xBF, 0xF2, 0xD1, 0xF2, 0xE3, 0xF2, 0xF5,
            0xFF, 0xF3, 0x07, 0xF3, 0x19, 0xF3, 0x2B, 0xF3, 0x3D, 0xF3, 0x4F, 0xF3, 0x61, 0xF3, 0x73, 0xF3, 0x85,
            0xFF, 0xF3, 0x97, 0xF3, 0xA9, 0xF3, 0xBB, 0xF3, 0xCD, 0xF3, 0xDF, 0xF3, 0xF1, 0xF4, 0x03, 0xF4, 0x15,
            0xFF, 0xF4, 0x27, 0xF4, 0x39, 0xF4, 0x4B, 0xF4, 0x5D, 0xF4, 0x6F, 0xF4, 0x81, 0xF4, 0x93, 0xF4, 0xA5,
            0xFF, 0xF4, 0xB7, 0xF4, 0xC9, 0xF4, 0xDB, 0xF4, 0xED, 0xF4, 0xFF, 0xF5, 0x11, 0xF5, 0x23, 0xF5, 0x35,
            0xFF, 0xF5, 0x47, 0xF5, 0x59, 0xF5, 0x6B, 0xF5, 0x7D, 0xF5, 0x8F, 0xF5, 0xA1, 0xF5, 0xB3, 0xF5, 0xC5,
            0xFF, 0xF5, 0xD7, 0xF5, 0xE9, 0xF5, 0xFB, 0xF6, 0x0D, 0xF6, 0x1F, 0xF6, 0x31, 0xF6, 0x43, 0xF6, 0x55,
            0xFF, 0xF6, 0x67, 0xF6, 0x79, 0xF6, 0x8B, 0xF6, 0x9D, 0xF6, 0xAF, 0xF6, 0xC1, 0xF6, 0xD3, 0xF6, 0xE5,
            0xFF, 0xF6, 0xF7, 0xF7, 0x09, 0xF7, 0x1B, 0xF7, 0x2D, 0xF7, 0x3F, 0xF7, 0x51, 0xF7, 0x63, 0xF7, 0x75,
            0xFF, 0xF7, 0x87, 0xF7, 0x99, 0xF7, 0xAB, 0xF7, 0xBD, 0xF7, 0xCF, 0xF7, 0xE1, 0xF7, 0xF3, 0xF8, 0x05,
            0xFF, 0xF8, 0x17, 0xF8, 0x29, 0xF8, 0x3B, 0xF8, 0x4D, 0xF8, 0x5F, 0xF8, 0x71, 0xF8, 0x83, 0xF8, 0x95,
            0xFF, 0xF8, 0xA7, 0xF8, 0xB9, 0xF8, 0xCB, 0xF8, 0xDD, 0xF8, 0xEF, 0xF9, 0x01, 0xF9, 0x13, 0xF9, 0x25,
            0xFF, 0xF9, 0x37, 0xF9, 0x49, 0xF9, 0x5B, 0xF9, 0x6D, 0xF9, 0x7F, 0xF9, 0x91, 0xF9, 0xA3, 0xF9, 0xB5,
            0xFF, 0xF9, 0xC7, 0xF9, 0xD9, 0xF9, 0xEB, 0xF9, 0xFD, 0xFA, 0x0F, 0xFA, 0x21, 0xFA, 0x33, 0xFA, 0x45,
            0xFF, 0xFA, 0x57, 0xFA, 0x69, 0xFA, 0x7B, 0xFA, 0x8D, 0xFA, 0x9F, 0xFA, 0xB1, 0xFA, 0xC3, 0xFA, 0xD5,
            0xFF, 0xFA, 0xE7, 0xFA, 0xF9, 0xFB, 0x0B, 0xFB, 0x1D, 0xFB, 0x2F, 0xFB, 0x41, 0xFB, 0x53, 0xFB, 0x65,
            0xFF, 0xFB, 0x77, 0xFB, 0x89, 0xFB, 0x9B, 0xFB, 0xAD, 0xFB, 0xBF, 0xFB, 0xD1, 0xFB, 0xE3, 0xFB, 0xF5,
            0xFF, 0xFC, 0x07, 0xFC, 0x19, 0xFC, 0x2B, 0xFC, 0x3D, 0xFC, 0x4F, 0xFC, 0x61, 0xFC, 0x73, 0xFC, 0x85,
            0xFF, 0xFC, 0x97, 0xFC, 0xA9, 0xFC, 0xBB, 0xFC, 0xCD, 0xFC, 0xDF, 0xFC, 0xF1, 0xFD, 0x03, 0xFD, 0x15,
            0xFF, 0xFD, 0x27, 0xFD, 0x39, 0xFD, 0x4B, 0xFD, 0x5D, 0xFD, 0x6F, 0xFD, 0x81, 0xFD, 0x93, 0xFD, 0xA5,
            0xFF, 0xFD, 0xB7, 0xFD, 0xC9, 0xFD, 0xDB, 0xFD, 0xED, 0xFD, 0xFF, 0xFE, 0x11, 0xFE, 0x23, 0xFE, 0x35,
            0xFF, 0xFE, 0x47, 0xFE, 0x59, 0xFE, 0x6B, 0xFE, 0x7D, 0xFE, 0x8F, 0xFE, 0xA1, 0xFE, 0xB3, 0xFE, 0xC5,
            0xFF, 0xFE, 0xD7, 0xFE, 0xE9, 0xFE, 0xFB, 0xFF, 0x0D, 0xFF, 0x1F, 0xFF, 0x31, 0xFF, 0x43, 0xFF, 0x55,
            0xFF, 0xFF, 0x67, 0xFF, 0x79, 0xFF, 0x8B, 0xFF, 0x9D, 0xFF, 0xAF, 0xFF, 0xC1, 0xFF, 0xD3, 0xFF, 0xE5,
            0xC0, 0x2F, 0xF7, 0x0F, 0xFF,
        ];
        AssertCompression(input, expected);
    }

    private void AssertCompression(byte[] input, byte[] expected)
    {
        using DataStream inputStream = DataStreamFactory.FromArray(input);

        Stream actual = encoder.Convert(inputStream);

        Assert.Multiple(() => {
            Assert.That(actual.Length, Is.EqualTo(expected.Length), "Stream lengths does not match");

            long checkLength = Math.Min(actual.Length, expected.Length);
            actual.Position = 0;
            for (int i = 0; i < checkLength; i++) {
                Assert.That(
                    actual.ReadByte().ToString("X2"),
                    Is.EqualTo(expected[i].ToString("X2")),
                    $"Position {i} does not match");
            }
        });
    }
}
